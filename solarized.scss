@charset "utf-8";

// Solarized skin
// ==============
// Created by Sander Voerman <mailto:sander@savoerman.nl> using the Solarized
// color scheme by Ethan Schoonover <https://ethanschoonover.com/solarized>.

// This style sheet implements three options for the minima.skin setting:
// "solarized-light" for light mode, "solarized-dark" for dark mode, and
// "solarized" for light or dark mode depending on user preference.
$sol-is-auto: true !default;
$sol-is-dark: false !default;


// Color scheme
// ------------
// The inline comments show the canonical L*a*b values for each color.
:root {

--sol-base03:   #002b36;  // 15 -12 -12
--sol-base02:   #073642;  // 20 -12 -12
--sol-base01:   #586e75;  // 45 -07 -07
--sol-base00:   #657b83;  // 50 -07 -07
--sol-base0:    #839496;  // 60 -06 -03
--sol-base1:    #93a1a1;  // 65 -05 -02
--sol-base2:    #eee8d5;  // 92 -00  10
--sol-base3:    #fdf6e3;  // 97  00  10
--sol-yellow:   #b58900;  // 60  10  65
--sol-orange:   #cb4b16;  // 50  50  55
--sol-red:      #dc322f;  // 50  65  45
--sol-magenta:  #d33682;  // 50  65 -05
--sol-violet:   #6c71c4;  // 50  15 -45
--sol-blue:     #268bd2;  // 55 -10 -45
--sol-cyan:     #2aa198;  // 60 -35 -05
--sol-green:    #859900;  // 60 -20  65

}

// Mixed colors
// ------------
// While not part of the original Solarized base tones, these derived tones
// are meant to replicate the visual style of the classic skin. They should
// not be used in cases where sufficiently contrasting colors are needed.

$sol-light-mix1:  mix($sol-base1, $sol-base3);
$sol-light-mix2:  mix($sol-blue, $sol-base00);
$sol-light-mix3:  mix($sol-base2, $sol-base3);
$sol-dark-mix1:   mix($sol-base01, $sol-base03);
$sol-dark-mix2:   mix($sol-blue, $sol-base0);
$sol-dark-mix3:   mix($sol-base02, $sol-base03);


// Mode selection
// --------------

$sol-mono3:    $sol-base3;
$sol-mono2:    $sol-base2;
$sol-mono1:    $sol-base1;
$sol-mono00:   $sol-base00;
$sol-mono01:   $sol-base01;
$sol-mix1:     $sol-light-mix1;
$sol-mix2:     $sol-light-mix2;
$sol-mix3:     $sol-light-mix3;

@if $sol-is-dark {
  $sol-mono3:  $sol-base03;
  $sol-mono2:  $sol-base02;
  $sol-mono1:  $sol-base01;
  $sol-mono00: $sol-base0;
  $sol-mono01: $sol-base1;
  $sol-mix1:   $sol-dark-mix1;
  $sol-mix2:   $sol-dark-mix2;
  $sol-mix3:   $sol-dark-mix3;
}

@if $sol-is-auto {
  :root {
    --solarized-mono3:  #{$sol-base3};
    --solarized-mono2:  #{$sol-base2};
    --solarized-mono1:  #{$sol-base1};
    --solarized-mono00: #{$sol-base00};
    --solarized-mono01: #{$sol-base01};
    --solarized-mix1:   #{$sol-light-mix1};
    --solarized-mix2:   #{$sol-light-mix2};
    --solarized-mix3:   #{$sol-light-mix3};
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --solarized-mono3:  #{$sol-base03};
      --solarized-mono2:  #{$sol-base02};
      --solarized-mono1:  #{$sol-base01};
      --solarized-mono00: #{$sol-base0};
      --solarized-mono01: #{$sol-base1};
      --solarized-mix1:   #{$sol-dark-mix1};
      --solarized-mix2:   #{$sol-dark-mix2};
      --solarized-mix3:   #{$sol-dark-mix3};
    }
  }

  $sol-mono3:  var(--solarized-mono3);
  $sol-mono2:  var(--solarized-mono2);
  $sol-mono1:  var(--solarized-mono1);
  $sol-mono00: var(--solarized-mono00);
  $sol-mono01: var(--solarized-mono01);
  $sol-mix1:   var(--solarized-mix1);
  $sol-mix2:   var(--solarized-mix2);
  $sol-mix3:   var(--solarized-mix3);
}


// Minima color variables
// ----------------------

$brand-color:           $sol-mono1 !default;
$brand-color-light:     $sol-mix1 !default;
$brand-color-dark:      $sol-mono00 !default;

$site-title-color:      $sol-mono00 !default;

$text-color:            $sol-mono01 !default;
$background-color:      $sol-mono3 !default;
$code-background-color: $sol-mono2 !default;

$link-base-color:       $sol-blue !default;
$link-visited-color:    $sol-mix2 !default;
$link-hover-color:      $sol-mono00 !default;

$border-color-01:       $brand-color-light !default;
$border-color-02:       $sol-mono1 !default;
$border-color-03:       $sol-mono00 !default;

$table-text-color:      $sol-mono00 !default;
$table-zebra-color:     $sol-mix3 !default;
$table-header-bg-color: $sol-mono2 !default;
$table-header-border:   $sol-mono1 !default;
$table-border-color:    $sol-mono1 !default;


// Syntax highlighting styles
// --------------------------

.highlight {
  .c     { color: $sol-mono1; font-style: italic } // Comment
  .err   { color: $sol-red } // Error
  .k     { color: $sol-mono01; font-weight: bold } // Keyword
  .o     { color: $sol-mono01; font-weight: bold } // Operator
  .cm    { color: $sol-mono1; font-style: italic } // Comment.Multiline
  .cp    { color: $sol-mono1; font-weight: bold } // Comment.Preproc
  .c1    { color: $sol-mono1; font-style: italic } // Comment.Single
  .cs    { color: $sol-mono1; font-weight: bold; font-style: italic } // Comment.Special
  .gd    { color: $sol-red } // Generic.Deleted
  .gd .x { color: $sol-red } // Generic.Deleted.Specific
  .ge    { color: $sol-mono00; font-style: italic } // Generic.Emph
  .gr    { color: $sol-red } // Generic.Error
  .gh    { color: $sol-mono1 } // Generic.Heading
  .gi    { color: $sol-green } // Generic.Inserted
  .gi .x { color: $sol-green } // Generic.Inserted.Specific
  .go    { color: $sol-mono00 } // Generic.Output
  .gp    { color: $sol-mono00 } // Generic.Prompt
  .gs    { color: $sol-mono01; font-weight: bold } // Generic.Strong
  .gu    { color: $sol-mono1 } // Generic.Subheading
  .gt    { color: $sol-red } // Generic.Traceback
  .kc    { color: $sol-mono01; font-weight: bold } // Keyword.Constant
  .kd    { color: $sol-mono01; font-weight: bold } // Keyword.Declaration
  .kp    { color: $sol-mono01; font-weight: bold } // Keyword.Pseudo
  .kr    { color: $sol-mono01; font-weight: bold } // Keyword.Reserved
  .kt    { color: $sol-violet; font-weight: bold } // Keyword.Type
  .m     { color: $sol-cyan } // Literal.Number
  .s     { color: $sol-magenta } // Literal.String
  .na    { color: $sol-cyan } // Name.Attribute
  .nb    { color: $sol-blue } // Name.Builtin
  .nc    { color: $sol-violet; font-weight: bold } // Name.Class
  .no    { color: $sol-cyan } // Name.Constant
  .ni    { color: $sol-violet } // Name.Entity
  .ne    { color: $sol-violet; font-weight: bold } // Name.Exception
  .nf    { color: $sol-blue; font-weight: bold } // Name.Function
  .nn    { color: $sol-mono00 } // Name.Namespace
  .nt    { color: $sol-blue } // Name.Tag
  .nv    { color: $sol-cyan } // Name.Variable
  .ow    { color: $sol-mono01; font-weight: bold } // Operator.Word
  .w     { color: $sol-mono1 } // Text.Whitespace
  .mf    { color: $sol-cyan } // Literal.Number.Float
  .mh    { color: $sol-cyan } // Literal.Number.Hex
  .mi    { color: $sol-cyan } // Literal.Number.Integer
  .mo    { color: $sol-cyan } // Literal.Number.Oct
  .sb    { color: $sol-magenta } // Literal.String.Backtick
  .sc    { color: $sol-magenta } // Literal.String.Char
  .sd    { color: $sol-magenta } // Literal.String.Doc
  .s2    { color: $sol-magenta } // Literal.String.Double
  .se    { color: $sol-magenta } // Literal.String.Escape
  .sh    { color: $sol-magenta } // Literal.String.Heredoc
  .si    { color: $sol-magenta } // Literal.String.Interpol
  .sx    { color: $sol-magenta } // Literal.String.Other
  .sr    { color: $sol-green } // Literal.String.Regex
  .s1    { color: $sol-magenta } // Literal.String.Single
  .ss    { color: $sol-magenta } // Literal.String.Symbol
  .bp    { color: $sol-mono1 } // Name.Builtin.Pseudo
  .vc    { color: $sol-cyan } // Name.Variable.Class
  .vg    { color: $sol-cyan } // Name.Variable.Global
  .vi    { color: $sol-cyan } // Name.Variable.Instance
  .il    { color: $sol-cyan } // Literal.Number.Integer.Long
}



.highlight {
  .c     { color: var(--minima-highlight-c-color); background-color: var(--minima-highlight-c-background-color); font-style: var(--minima-highlight-c-font-style); font-weight: var(--minima-highlight-c-font-weight) } // Comment
  .err   { color: var(--minima-highlight-err-color); background-color: var(--minima-highlight-err-background-color); font-style: var(--minima-highlight-err-font-style); font-weight: var(--minima-highlight-err-font-weight) } // Error
  .k     { color: var(--minima-highlight-k-color); background-color: var(--minima-highlight-k-background-color); font-style: var(--minima-highlight-k-font-style); font-weight: var(--minima-highlight-k-font-weight) } // Keyword
  .o     { color: var(--minima-highlight-o-color); background-color: var(--minima-highlight-o-background-color); font-style: var(--minima-highlight-o-font-style); font-weight: var(--minima-highlight-o-font-weight) } // Operator
  .cm    { color: var(--minima-highlight-cm-color); background-color: var(--minima-highlight-cm-background-color); font-style: var(--minima-highlight-cm-font-style); font-weight: var(--minima-highlight-cm-font-weight) } // Comment.Multiline
  .cp    { color: var(--minima-highlight-cp-color); background-color: var(--minima-highlight-cp-background-color); font-style: var(--minima-highlight-cp-font-style); font-weight: var(--minima-highlight-cp-font-weight) } // Comment.Preproc
  .c1    { color: var(--minima-highlight-c1-color); background-color: var(--minima-highlight-c1-background-color); font-style: var(--minima-highlight-c1-font-style); font-weight: var(--minima-highlight-c1-font-weight) } // Comment.Single
  .cs    { color: var(--minima-highlight-cs-color); background-color: var(--minima-highlight-cs-background-color); font-style: var(--minima-highlight-cs-font-style); font-weight: var(--minima-highlight-cs-font-weight) } // Comment.Special
  .gd    { color: var(--minima-highlight-gd-color); background-color: var(--minima-highlight-gd-background-color); font-style: var(--minima-highlight-gd-font-style); font-weight: var(--minima-highlight-gd-font-weight) } // Generic.Deleted
  .gd .x { color: var(--minima-highlight-gdx-color); background-color: var(--minima-highlight-gdx-background-color); font-style: var(--minima-highlight-gdx-font-style); font-weight: var(--minima-highlight-gdx-font-weight) } // Generic.Deleted.Specific
  .ge    { color: var(--minima-highlight-ge-color); background-color: var(--minima-highlight-ge-background-color); font-style: var(--minima-highlight-ge-font-style); font-weight: var(--minima-highlight-ge-font-weight) } // Generic.Emph
  .gr    { color: var(--minima-highlight-gr-color); background-color: var(--minima-highlight-gr-background-color); font-style: var(--minima-highlight-gr-font-style); font-weight: var(--minima-highlight-gr-font-weight) } // Generic.Error
  .gh    { color: var(--minima-highlight-gh-color); background-color: var(--minima-highlight-gh-background-color); font-style: var(--minima-highlight-gh-font-style); font-weight: var(--minima-highlight-gh-font-weight) } // Generic.Heading
  .gi    { color: var(--minima-highlight-gi-color); background-color: var(--minima-highlight-gi-background-color); font-style: var(--minima-highlight-gi-font-style); font-weight: var(--minima-highlight-gi-font-weight) } // Generic.Inserted
  .gi .x { color: var(--minima-highlight-gix-color); background-color: var(--minima-highlight-gix-background-color); font-style: var(--minima-highlight-gix-font-style); font-weight: var(--minima-highlight-gix-font-weight) } // Generic.Inserted.Specific
  .go    { color: var(--minima-highlight-go-color); background-color: var(--minima-highlight-go-background-color); font-style: var(--minima-highlight-go-font-style); font-weight: var(--minima-highlight-go-font-weight) } // Generic.Output
  .gp    { color: var(--minima-highlight-gp-color); background-color: var(--minima-highlight-gp-background-color); font-style: var(--minima-highlight-gp-font-style); font-weight: var(--minima-highlight-gp-font-weight) } // Generic.Prompt
  .gs    { color: var(--minima-highlight-gs-color); background-color: var(--minima-highlight-gs-background-color); font-style: var(--minima-highlight-gs-font-style); font-weight: var(--minima-highlight-gs-font-weight) } // Generic.Strong
  .gu    { color: var(--minima-highlight-gu-color); background-color: var(--minima-highlight-gu-background-color); font-style: var(--minima-highlight-gu-font-style); font-weight: var(--minima-highlight-gu-font-weight) } // Generic.Subheading
  .gt    { color: var(--minima-highlight-gt-color); background-color: var(--minima-highlight-gt-background-color); font-style: var(--minima-highlight-gt-font-style); font-weight: var(--minima-highlight-gt-font-weight) } // Generic.Traceback
  .kc    { color: var(--minima-highlight-kc-color); background-color: var(--minima-highlight-kc-background-color); font-style: var(--minima-highlight-kc-font-style); font-weight: var(--minima-highlight-kc-font-weight) } // Keyword.Constant
  .kd    { color: var(--minima-highlight-kd-color); background-color: var(--minima-highlight-kd-background-color); font-style: var(--minima-highlight-kd-font-style); font-weight: var(--minima-highlight-kd-font-weight) } // Keyword.Declaration
  .kp    { color: var(--minima-highlight-kp-color); background-color: var(--minima-highlight-kp-background-color); font-style: var(--minima-highlight-kp-font-style); font-weight: var(--minima-highlight-kp-font-weight) } // Keyword.Pseudo
  .kr    { color: var(--minima-highlight-kr-color); background-color: var(--minima-highlight-kr-background-color); font-style: var(--minima-highlight-kr-font-style); font-weight: var(--minima-highlight-kr-font-weight) } // Keyword.Reserved
  .kt    { color: var(--minima-highlight-kt-color); background-color: var(--minima-highlight-kt-background-color); font-style: var(--minima-highlight-kt-font-style); font-weight: var(--minima-highlight-kt-font-weight) } // Keyword.Type
  .m     { color: var(--minima-highlight-m-color); background-color: var(--minima-highlight-m-background-color); font-style: var(--minima-highlight-m-font-style); font-weight: var(--minima-highlight-m-font-weight) } // Literal.Number
  .s     { color: var(--minima-highlight-s-color); background-color: var(--minima-highlight-s-background-color); font-style: var(--minima-highlight-s-font-style); font-weight: var(--minima-highlight-s-font-weight) } // Literal.String
  .na    { color: var(--minima-highlight-na-color); background-color: var(--minima-highlight-na-background-color); font-style: var(--minima-highlight-na-font-style); font-weight: var(--minima-highlight-na-font-weight) } // Name.Attribute
  .nb    { color: var(--minima-highlight-nb-color); background-color: var(--minima-highlight-nb-background-color); font-style: var(--minima-highlight-nb-font-style); font-weight: var(--minima-highlight-nb-font-weight) } // Name.Builtin
  .nc    { color: var(--minima-highlight-nc-color); background-color: var(--minima-highlight-nc-background-color); font-style: var(--minima-highlight-nc-font-style); font-weight: var(--minima-highlight-nc-font-weight) } // Name.Class
  .no    { color: var(--minima-highlight-no-color); background-color: var(--minima-highlight-no-background-color); font-style: var(--minima-highlight-no-font-style); font-weight: var(--minima-highlight-no-font-weight) } // Name.Constant
  .ni    { color: var(--minima-highlight-ni-color); background-color: var(--minima-highlight-ni-background-color); font-style: var(--minima-highlight-ni-font-style); font-weight: var(--minima-highlight-ni-font-weight) } // Name.Entity
  .ne    { color: var(--minima-highlight-ne-color); background-color: var(--minima-highlight-ne-background-color); font-style: var(--minima-highlight-ne-font-style); font-weight: var(--minima-highlight-ne-font-weight) } // Name.Exception
  .nf    { color: var(--minima-highlight-nf-color); background-color: var(--minima-highlight-nf-background-color); font-style: var(--minima-highlight-nf-font-style); font-weight: var(--minima-highlight-nf-font-weight) } // Name.Function
  .nn    { color: var(--minima-highlight-nn-color); background-color: var(--minima-highlight-nn-background-color); font-style: var(--minima-highlight-nn-font-style); font-weight: var(--minima-highlight-nn-font-weight) } // Name.Namespace
  .nt    { color: var(--minima-highlight-nt-color); background-color: var(--minima-highlight-nt-background-color); font-style: var(--minima-highlight-nt-font-style); font-weight: var(--minima-highlight-nt-font-weight) } // Name.Tag
  .nv    { color: var(--minima-highlight-nv-color); background-color: var(--minima-highlight-nv-background-color); font-style: var(--minima-highlight-nv-font-style); font-weight: var(--minima-highlight-nv-font-weight) } // Name.Variable
  .ow    { color: var(--minima-highlight-ow-color); background-color: var(--minima-highlight-ow-background-color); font-style: var(--minima-highlight-ow-font-style); font-weight: var(--minima-highlight-ow-font-weight) } // Operator.Word
  .w     { color: var(--minima-highlight-w-color); background-color: var(--minima-highlight-w-background-color); font-style: var(--minima-highlight-w-font-style); font-weight: var(--minima-highlight-w-font-weight) } // Text.Whitespace
  .mf    { color: var(--minima-highlight-mf-color); background-color: var(--minima-highlight-mf-background-color); font-style: var(--minima-highlight-mf-font-style); font-weight: var(--minima-highlight-mf-font-weight) } // Literal.Number.Float
  .mh    { color: var(--minima-highlight-nh-color); background-color: var(--minima-highlight-nh-background-color); font-style: var(--minima-highlight-nh-font-style); font-weight: var(--minima-highlight-nh-font-weight) } // Literal.Number.Hex
  .mi    { color: var(--minima-highlight-mi-color); background-color: var(--minima-highlight-mi-background-color); font-style: var(--minima-highlight-mi-font-style); font-weight: var(--minima-highlight-mi-font-weight) } // Literal.Number.Integer
  .mo    { color: var(--minima-highlight-mo-color); background-color: var(--minima-highlight-mo-background-color); font-style: var(--minima-highlight-mo-font-style); font-weight: var(--minima-highlight-mo-font-weight) } // Literal.Number.Oct
  .sb    { color: var(--minima-highlight-sb-color); background-color: var(--minima-highlight-sb-background-color); font-style: var(--minima-highlight-sb-font-style); font-weight: var(--minima-highlight-sb-font-weight) } // Literal.String.Backtick
  .sc    { color: var(--minima-highlight-sc-color); background-color: var(--minima-highlight-sc-background-color); font-style: var(--minima-highlight-sc-font-style); font-weight: var(--minima-highlight-sc-font-weight) } // Literal.String.Char
  .sd    { color: var(--minima-highlight-sd-color); background-color: var(--minima-highlight-sd-background-color); font-style: var(--minima-highlight-sd-font-style); font-weight: var(--minima-highlight-sd-font-weight) } // Literal.String.Doc
  .s2    { color: var(--minima-highlight-s2-color); background-color: var(--minima-highlight-s2-background-color); font-style: var(--minima-highlight-s2-font-style); font-weight: var(--minima-highlight-s2-font-weight) } // Literal.String.Double
  .se    { color: var(--minima-highlight-se-color); background-color: var(--minima-highlight-se-background-color); font-style: var(--minima-highlight-se-font-style); font-weight: var(--minima-highlight-se-font-weight) } // Literal.String.Escape
  .sh    { color: var(--minima-highlight-sh-color); background-color: var(--minima-highlight-sh-background-color); font-style: var(--minima-highlight-sh-font-style); font-weight: var(--minima-highlight-sh-font-weight) } // Literal.String.Heredoc
  .si    { color: var(--minima-highlight-si-color); background-color: var(--minima-highlight-si-background-color); font-style: var(--minima-highlight-si-font-style); font-weight: var(--minima-highlight-si-font-weight) }// Literal.String.Interpol
  .sx    { color: var(--minima-highlight-sx-color); background-color: var(--minima-highlight-sx-background-color); font-style: var(--minima-highlight-sx-font-style); font-weight: var(--minima-highlight-sx-font-weight) } // Literal.String.Other
  .sr    { color: var(--minima-highlight-sr-color); background-color: var(--minima-highlight-sr-background-color); font-style: var(--minima-highlight-sr-font-style); font-weight: var(--minima-highlight-sr-font-weight) } // Literal.String.Regex
  .s1    { color: var(--minima-highlight-s1-color); background-color: var(--minima-highlight-s1-background-color); font-style: var(--minima-highlight-s1-font-style); font-weight: var(--minima-highlight-s1-font-weight) } // Literal.String.Single
  .ss    { color: var(--minima-highlight-ss-color); background-color: var(--minima-highlight-ss-background-color); font-style: var(--minima-highlight-ss-font-style); font-weight: var(--minima-highlight-ss-font-weight) } // Literal.String.Symbol
  .bp    { color: var(--minima-highlight-bp-color); background-color: var(--minima-highlight-bp-background-color); font-style: var(--minima-highlight-bp-font-style); font-weight: var(--minima-highlight-bp-font-weight) } // Name.Builtin.Pseudo
  .vc    { color: var(--minima-highlight-vc-color); background-color: var(--minima-highlight-vc-background-color); font-style: var(--minima-highlight-vc-font-style); font-weight: var(--minima-highlight-vc-font-weight) } // Name.Variable.Class
  .vg    { color: var(--minima-highlight-vg-color); background-color: var(--minima-highlight-vg-background-color); font-style: var(--minima-highlight-vg-font-style); font-weight: var(--minima-highlight-vg-font-weight) } // Name.Variable.Global
  .vi    { color: var(--minima-highlight-vi-color); background-color: var(--minima-highlight-vi-background-color); font-style: var(--minima-highlight-vi-font-style); font-weight: var(--minima-highlight-vi-font-weight) } // Name.Variable.Instance
  .il    { color: var(--minima-highlight-il-color); background-color: var(--minima-highlight-il-background-color); font-style: var(--minima-highlight-il-font-style); font-weight: var(--minima-highlight-il-font-weight) } // Literal.Number.Integer.Long
}


/* begin initialize.scss */

:root {
    --minima-base-font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Segoe UI Emoji", "Segoe UI Symbol", "Apple Color Emoji", Roboto, Helvetica, Arial, sans-serif ;
    --minima-code-font-family: "Menlo", "Inconsolata", "Consolas", "Roboto Mono", "Ubuntu Mono", "Liberation Mono", "Courier New", monospace;
    --minima-base-font-size: 16px ;
    --minima-base-font-weight: 400 ;
    --minima-small-font-size: calc(var(--minima-base-font-size) * 0.875) ;
    --minima-base-line-height: 1.5 ;
    --minima-spacing-unit: 30px ;
    --minima-table-text-align: left ;
}

:root {
    --minima-content-width: 800px;
}

// Width of the content area
@media screen and (min-width: 600px) { //on-medium = on-palm
  .site-nav {
    position: static;
    float: right;
    border: none;
    background-color: inherit;
  }

  .site-nav label[for="nav-trigger"] {
    display: none;
  }

  .site-nav .menu-icon {
    display: none;
  }

  .site-nav input ~ .trigger {
    display: block;
  }

  .site-nav .page-link {
    display: inline;
    padding: 0;

    &:not(:last-child) {
      margin-right: 20px;
    }
    margin-left: auto;
  }


//@media screen and (min-width: $on-medium) {
  .footer-col-wrapper {
    display: flex
  }

  .footer-col {
    width: calc(100% - (var(--minima-spacing-unit) / 2 ));
    padding: 0 (calc(var(--minima-spacing-unit) * .5));

    &:first-child {
      padding-right: calc(var(--minima-spacing-unit) * .5);
      padding-left: 0;
    }

    &:last-child {
      padding-right: 0;
      padding-left: calc(var(--minima-spacing-unit) * .5);
    }
  }
//}

}

:root {
  --minima-wrapper-max-width: calc( var(--minima-content-width) - (var(--minima-spacing-unit)));
  --minima-wrapper-padding-left-right: calc(var(--minima-spacing-unit) * .5);
  
  --minima-post-content-h1-font-size: 2.625rem;
  --minima-post-content-h2-font-size: 1.75rem;
  --minima-post-content-h3-font-size: 1.375rem;

  --minima-footer-col1-width: calc(50% - (var(--minima-spacing-unit) / 2));
  --minima-footer-col2-width: calc(50% - (var(--minima-spacing-unit) / 2));
  --minima-footer-col3-width: calc(50% - (var(--minima-spacing-unit) / 2));
}

@media screen and (min-width: 800px) { //on-large
:root{
    --minima-wrapper-max-width: calc( var(--minima-content-width) - (var(--minima-spacing-unit) * 2));
    --minima-wrapper-padding-left-right: var(--minima-spacing-unit);
    
    --minima-one-half-width: calc(50% - (var(--minima-spacing-unit) / 2 ));
  
    --minima-post-content-h1-font-size: 2.625rem;
    --minima-post-content-h2-font-size: 2rem;
    --minima-post-content-h3-font-size: 1.625rem;

    --minima-footer-col1-width: calc(35% - (var(--minima-spacing-unit) / 2));
    --minima-footer-col1-width: calc(20% - (var(--minima-spacing-unit) / 2 ));
    --minima-footer-col1-width: calc(45% - (var(--minima-spacing-unit) / 2 ));

  }
}


@media screen and (max-width: 600px) { //on-palm
:root {
    --minima-site-title-padding-right: 45px;
}
}

@media screen and (max-width: 800px) { //on-laptop
:root {
  --minima-table-display: block;
  --minima-table-overflow-x: auto;
  --minima-table-webkit-overflow-scrolling: touch;
  --minima-table-ms-overflow-style: -ms-autohiding-scrollbar;
}
}

// Syntax highlighting styles should be adjusted appropriately for every "skin"
// List of tokens: https://github.com/rouge-ruby/rouge/wiki/List-of-tokens
// Some colors come from Material Theme Darker:
// https://github.com/material-theme/vsc-material-theme/blob/master/scripts/generator/settings/specific/darker-hc.ts
// https://github.com/material-theme/vsc-material-theme/blob/master/scripts/generator/color-set.ts
// ----------------------------------------------------------------------------
// Use media queries like this:
// @include media-query($on-palm) {
//   .wrapper {
//     padding-right: $spacing-unit / 2;
//     padding-left: $spacing-unit / 2;
//   }
// }
// Notice the following mixin uses max-width, in a deprecated, desktop-first
// approach, whereas media queries used elsewhere now use min-width.

// Import pre-styling-overrides hook and style-partials.
;

@import "custom-variables_base_layout_custom-styles.scss"
